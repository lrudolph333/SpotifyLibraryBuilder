Metadata-Version: 2.4
Name: spotify-library-builder
Version: 0.1.2
Summary: CLI tool that builds a local MP3 library from a Spotify playlist by fetching YouTube videos and converting them to MP3.
Author-email: Trey Good <trey.ru.iii@gmail.com>
License: MIT
Project-URL: Source, https://github.com/lrudolph333/SpotifyLibraryBuilder
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.9
Description-Content-Type: text/markdown
Requires-Dist: requests>=2.31.0
Requires-Dist: python-dotenv>=1.0.0
Requires-Dist: tqdm>=4.66.0
Requires-Dist: yt-dlp>=2025.6.30

# SpotifyLibraryBuilder

A command-line tool that turns any public Spotify playlist into a neatly-organised local MP3 collection. Tracks are located on YouTube, downloaded with **yt-dlp**, and converted to MP3 using **ffmpeg**.

## Installation

```bash
python -m venv .venv
source .venv/bin/activate
pip install -e .  # development install
```

Dependencies:

- Python 3.9+
- ffmpeg (must be on your `$PATH`)
  – macOS: `brew install ffmpeg`
  - Ubuntu: `sudo apt install ffmpeg`
  - Windows: see <https://ffmpeg.org/download.html>.

This installs the console script `sp-lib-builder`.

## Configuration

1. Copy `env.template` → `.env`
2. Fill in your API credentials:
   - **Spotify** `SPOTIFY_CLIENT_ID`, `SPOTIFY_CLIENT_SECRET`
   - **Google / YouTube Data API v3** `YOUTUBE_API_KEY`

The `.env` file is loaded automatically at runtime.

## Usage

```bash
# Basic – save into ~/Downloads
sp-lib-builder <spotify-playlist-id>

# Choose a different root directory
sp-lib-builder <playlist-id> --output /path/to/library

# Only download tracks added after 1 July 2025 18:00 UTC
sp-lib-builder <playlist-id> --date-added-threshold 2025-07-01T18:00:00Z

# Only download tracks that appear *after* a particular song in the playlist order
sp-lib-builder <playlist-id> --song-name-threshold "My Favourite Tune"
```

_`--date-added-threshold` and `--song-name-threshold` are mutually exclusive._

### Finding your playlist ID

The playlist ID is the final segment of a Spotify playlist URL. For example, in
`https://open.spotify.com/playlist/1QmO6l09lG1hQD1ILYBRdK` the ID is
`1QmO6l09lG1hQD1ILYBRdK`.

For every run the tool creates a timestamped folder inside the `--output` directory, e.g.:

```
/path/to/library/
└── sp-lib-builder-07-03-2025-15-42-10/
    ├── Track-1.mp3
    ├── Track-2.mp3
    └── ...
```

### What happens under the hood?

1. Playlist metadata is fetched from Spotify.
2. The first matching YouTube video for each song is located via the YouTube Data API.
3. yt-dlp downloads the best audio stream and converts it to MP3 (192 kbps) via ffmpeg.
4. Files are written to the timestamped folder, avoiding name collisions automatically.

Progress is shown with a live `tqdm` progress-bar and detailed log output.

### Sample run

```console
$ sp-lib-builder 0AaeQ5u3BwJue96JkUgG4R -o ~/Downloads
18:55:11 [INFO] root – Fetching tracks from Spotify playlist 0AaeQ5u3BwJue96JkUgG4R
18:55:11 [INFO] spotify_library_builder.spotify_client – Fetched 9 tracks from playlist 0AaeQ5u3BwJue96JkUgG4R
18:55:11 [INFO] root – Found 9 playable tracks
Processing:   0%| | 0/9 [00:00<?, ?track/s]
18:55:12 [INFO] spotify_library_builder.converter – [youtube] Extracting URL: https://www.youtube.com/watch?v=cmc8q2dcIMs
18:55:12 [INFO] spotify_library_builder.converter – [youtube] cmc8q2dcIMs: Downloading webpage
18:55:13 [INFO] spotify_library_builder.converter – [youtube] cmc8q2dcIMs: Downloading tv client config
18:55:14 [INFO] spotify_library_builder.converter – [youtube] cmc8q2dcIMs: Downloading tv player API JSON
18:55:14 [INFO] spotify_library_builder.converter – [youtube] cmc8q2dcIMs: Downloading ios player API JSON
18:55:15 [INFO] spotify_library_builder.converter – [youtube] cmc8q2dcIMs: Downloading m3u8 information
18:55:15 [INFO] spotify_library_builder.converter – [info] cmc8q2dcIMs: Downloading 1 format(s): 251
18:55:16 [INFO] spotify_library_builder.converter – [download] Destination: /Users/godye/SpotifyLibraryBuilderDownloads/sp-lib-builder-07-02-2025-18-55-11/Icon-Jaden.webm
18:55:16 [INFO] spotify_library_builder.converter – [download] 100% of    3.18MiB in 00:00:00 at 10.69MiB/s
18:55:16 [INFO] spotify_library_builder.converter – [ExtractAudio] Destination: /Users/godye/SpotifyLibraryBuilderDownloads/sp-lib-builder-07-02-2025-18-55-11/Icon-Jaden.mp3
18:55:19 [INFO] spotify_library_builder.converter – Deleting original file ...
18:55:19 [INFO] spotify_library_builder.converter – Saved MP3 to /Users/godye/SpotifyLibraryBuilderDownloads/sp-lib-builder-07-02-2025-18-55-11/Icon-Jaden.mp3
```

[More sample runs](https://gist.github.com/lrudolph333/557121d89587fa7c9199008d9dc16e94)

## Project layout

```
src/spotify_library_builder/
    cli.py            # Command-line interface
    config.py         # Environment variable handling
    converter.py      # yt-dlp + ffmpeg integration
    spotify_client.py # Spotify API wrapper
    youtube_client.py # YouTube search wrapper
    utils.py          # Generic utilities
```

## Publishing to PyPI

1. Ensure `pyproject.toml` has an up-to-date version and author/contact info.
2. Update the changelog (if any) and commit your changes.
3. Build the distribution artifacts:
   ```bash
   python -m build   # requires `pip install build`
   ```
4. Upload to PyPI (test first!):
   ```bash
   python -m twine upload --repository testpypi dist/*
   # once happy:
   python -m twine upload dist/*
   ```

## Disclaimer

This project interacts with Spotify and YouTube. Make sure your usage complies with their respective terms of service.

**Audio quality**: Downloads rely on whatever audio track is present in the chosen YouTube video. Some uploads may contain silent gaps, skips, commentary, or other inconsistencies. Always verify the resulting MP3s and replace any poor-quality sources if necessary.

### API documentation

- [Spotify Web API – Getting started](https://developer.spotify.com/documentation/web-api/tutorials/getting-started)
- [YouTube Data API v3](https://developers.google.com/youtube/v3)
